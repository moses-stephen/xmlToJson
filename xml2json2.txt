let fs = require('fs');

let xmlParser = require('xml2json');

function xmlToJson() {
    fs.readFile('./index.xml', function (err, data) {
        var jsonData = xmlParser.toJson(data)
        // console.log('jsonData', jsonData);

        var output = JSON.parse(jsonData);
        // console.log('output', output.rss);

        var result = {
            channel: {
                channel_title: output.rss.title,
                channel_description: output.rss.description,
                channel_generator: output.rss.generator,
                channel_pubDate: output.rss.pubDate,
                channel_lastBuildDate: output.rss.lastBuildDate,
                channel_updatedAt: output.rss.updatedAt,
                channel_language: output.rss.language
            },
            series: [],
            movies: []
        };
        if (output.rss.series && output.rss.series.item && output.rss.series.item.length > 0) {
            var series = [];
            var movies = [];
            output.rss.series.item.forEach(element => {
                if (element['tastemade:meta'] && element['tastemade:meta']['tastemade:meta-value'] && element['tastemade:meta']['tastemade:meta-value'].length > 0) {
                    const movie = element['tastemade:meta']['tastemade:meta-value'].find(item => (item.name == 'isMovie' && item.value == 'true'));
                    if (movie) {
                        movies.push(element);
                    } else {
                        series.push(element);
                    }
                }
            });
            series.forEach(element => {
                var mediathumbnail_height = [];
                var mediathumbnail_width = [];
                var mediathumbnail_url = [];
                var mediathumbnail_updatedAt = [];
                var mediathumbnail_x_tm_id = [];
                var mediathumbnail_x_tm_type = [];
                if (element['media:thumbnail'] && element['media:thumbnail'].length > 0) {
                    element['media:thumbnail'].forEach(item => {
                        mediathumbnail_height.push(item.height)
                        mediathumbnail_width.push(item.width)
                        mediathumbnail_url.push(item.url)
                        mediathumbnail_updatedAt.push(item.updatedAt)
                        mediathumbnail_x_tm_id.push(item['x-tm-id'])
                        mediathumbnail_x_tm_type.push(item['x-tm-type'])
                    })
                }
                var meta_value_name = meta_value_value = [];
                if (element['tastemade:meta'] && element['tastemade:meta']['tastemade:meta-value'] && element['tastemade:meta']['tastemade:meta-value'].length > 0) {
                    element['tastemade:meta']['tastemade:meta-value'].forEach(item => {
                        meta_value_name.push(item.name);
                        meta_value_value.push(item.value);
                    });
                }
                var meta_list_value = [];
                if (element['tastemade:meta'] && element['tastemade:meta']['tastemade:meta-list'] && element['tastemade:meta']['tastemade:meta-list'].length > 0) {
                    element['tastemade:meta']['tastemade:meta-list'].forEach(item => {
                        if (item['tastemade:meta-value'] && item['tastemade:meta-value'].length > 0) {
                            item['tastemade:meta-value'].forEach(item1 => {
                                meta_list_value.push(item1.value);
                            });
                        }
                    });
                }
                var episode_meta_name = episode_meta_value = [];
                if (element.episodes && element.episodes.item && element.episodes.item['tastemade:meta'] && element.episodes.item['tastemade:meta']['tastemade:meta-value']) {
                    element.episodes.item['tastemade:meta']['tastemade:meta-value'].forEach(item => {
                        episode_meta_name.push(item.name);
                        episode_meta_value.push(item.value);
                    });
                }

                var episode_meta_list = [];
                var episode_meta_vertical = '';
                if (element.episodes && element.episodes.item && element.episodes.item['tastemade:meta'] && element.episodes.item['tastemade:meta']['tastemade:meta-list']) {
                    const data = element.episodes.item['tastemade:meta']['tastemade:meta-list'].find(item => item.name == 'svodPlatformWhitelist');
                    data['tastemade:meta-value'].forEach(item => {
                        episode_meta_list.push(item.value);
                    });
                    const verticals = element.episodes.item['tastemade:meta']['tastemade:meta-list'].find(item => item.name == 'verticals');
                    episode_meta_vertical = verticals['tastemade:meta-value'].value
                }

                var episode_localClosedCaptions = episode_localClosedCaptions_lang = [];
                if (element.episodes && element.episodes.item && element.episodes.item['tastemade:localClosedCaptions']) {
                    element.episodes.item['tastemade:localClosedCaptions'].forEach(item => {
                        episode_localClosedCaptions.push(item.$t);
                        episode_localClosedCaptions_lang.push(item.langCode);
                    })
                }
                result.series.push({
                    title_type: 'Episode',
                    series_tastemade_id: element['tastemade:id'],
                    series_guid: element.guid,
                    series_updatedAt: element.updatedAt,
                    series_tmsID: element.tmsID,
                    series_title: element.title,
                    series_description: element.description,
                    series_tastemade_localization_locale: element['tastemade:localization'] ? element['tastemade:localization'].locale : '',
                    series_tastemade_localization_tastemade_id: element['tastemade:localization'] ? element['tastemade:localization']['tastemade:id'] : '',
                    series_tastemade_localization_title: element['tastemade:localization'] ? element['tastemade:localization'].title : '',
                    series_tastemade_localization_description: element['tastemade:localization'] ? element['tastemade:localization'].description : '',
                    series_tastemade_localization_updatedAt: element['tastemade:localization'] ? element['tastemade:localization'].updatedAt : '',
                    series_genre: element.genre,
                    series_rating: element.rating ? element.rating : '',
                    series_mediathumbnail_height: mediathumbnail_height,
                    series_mediathumbnail_width: mediathumbnail_width,
                    series_mediathumbnail_url: mediathumbnail_url,
                    series_mediathumbnail_updatedAt: mediathumbnail_updatedAt,
                    'series_mediathumbnail_x-tm-id': mediathumbnail_x_tm_id,
                    'series_mediathumbnail_x-tm-type': mediathumbnail_x_tm_type,
                    series_meta_value_name: meta_value_name,
                    series_meta_value_value: meta_value_value,
                    series_meta_list_value: meta_list_value,
                    series_localClosedCaptions: '', //need to ask
                    series_localClosedCaptions_lang: '', //need to ask
                    episodes: [
                        {
                            episode_tastemade_id: element.episodes.item['tastemade:id'],
                            episode_guid: element.episodes.item.guid.$t,
                            episode_tmsID: element.episodes.item.tmsID,
                            episode_updatedAt: element.episodes.item.updatedAt,
                            episode_title: element.episodes.item.title,
                            episode_description: element.episodes.item.description,
                            episode_episodeNumber: element.episodes.item.episodeNumber,
                            episode_seasonNumber: element.episodes.item.seasonNumber,
                            episode_tastemade_localization_locale: element.episodes.item['tastemade:localization'].locale,
                            episode_tastemade_localization_tastemade_id: element.episodes.item['tastemade:localization']['tastemade:id'],
                            episode_tastemade_localization_title: element.episodes.item['tastemade:localization'].title,
                            episode_tastemade_localization_description: element.episodes.item['tastemade:localization'].description,
                            episode_tastemade_localization_updatedAt: element.episodes.item['tastemade:localization'].updatedAt,
                            episode_mediathumbnail_width: element.episodes.item['media:thumbnail'].width,
                            episode_mediathumbnail_height: element.episodes.item['media:thumbnail'].height,
                            episode_mediathumbnail_url: element.episodes.item['media:thumbnail'].url,
                            episode_mediathumbnail_updatedAt: element.episodes.item['media:thumbnail'].updatedAt,
                            'episode_mediathumbnail_x-tm-id': element.episodes.item['media:thumbnail']['x-tm-id'],
                            episode_media_keywords: element.episodes.item['media:keywords'],
                            episode_meta_name: episode_meta_name,
                            episode_meta_value: episode_meta_value,
                            episode_meta_list: episode_meta_list,
                            episode_meta_vertical: episode_meta_vertical,
                            episode_closedCaptions: element.episodes.item.closedCaptions,
                            episode_localClosedCaptions: episode_localClosedCaptions,
                            episode_localClosedCaptions_lang: episode_localClosedCaptions_lang,
                            episode_licenseStartDate: element.episodes.item.licenseStartDate,
                            episode_licenseEndDate: '', // need to ask
                            episode_mediacontent_updatedAt: element.episodes.item['media:content'].updatedAt,
                            episode_mediacontent_duration: element.episodes.item['media:content'].duration,
                            episode_mediacontent_adBreakPoints: element.episodes.item['media:content'].adBreakPoints,
                            episode_mediacontent_fps: element.episodes.item['media:content'].fps,
                            episode_mediacontent_medium: element.episodes.item['media:content'].medium,
                            episode_mediacontent_url: element.episodes.item['media:content'].url,
                            episode_comPiece_updatedAt: '', //need to ask
                            episode_comPiece_url: '', //need to ask
                            'episode_prores_x-tm-id': element.episodes.item.prores['x-tm-id'],
                            episode_prores_updatedAt: element.episodes.item.prores.updatedAt,
                            episode_prores_url: element.episodes.item.prores.url
                        }
                    ]
                });
            });

            movies.forEach(element => {
                var mediathumbnail_height = [];
                var mediathumbnail_width = [];
                var mediathumbnail_url = [];
                var mediathumbnail_updatedAt = [];
                var mediathumbnail_x_tm_id = [];
                var mediathumbnail_x_tm_type = [];
                if (element['media:thumbnail'] && element['media:thumbnail'].length > 0) {
                    element['media:thumbnail'].forEach(item => {
                        mediathumbnail_height.push(item.height)
                        mediathumbnail_width.push(item.width)
                        mediathumbnail_url.push(item.url)
                        mediathumbnail_updatedAt.push(item.updatedAt)
                        mediathumbnail_x_tm_id.push(item['x-tm-id'])
                        mediathumbnail_x_tm_type.push(item['x-tm-type'])
                    })
                }

                var movie_meta_value_name = movie_meta_value_value = [];
                if (element['tastemade:meta'] && element['tastemade:meta']['tastemade:meta-value']) {
                    element['tastemade:meta']['tastemade:meta-value'].forEach(item => {
                        movie_meta_value_name.push(item.name);
                        movie_meta_value_value.push(item.value);
                    })
                }
                result.movies.push(
                    {
                        title_type: 'Movie',
                        movie_tastemade_id: element['tastemade:id'],
                        movie_guid: element.guid,
                        movie_updatedAt: element.updatedAt,
                        movie_tmsID: element.tmsID,
                        movie_title: element.title,
                        movie_description: element.description,
                        movie_tastemade_localization_locale: '',
                        movie_tastemade_localization_tastemade_id: '',
                        movie_tastemade_localization_title: '',
                        movie_tastemade_localization_description: '',
                        movie_tastemade_localization_updatedAt: '',
                        movie_genre: element.genre,
                        movie_rating: '',
                        movie_mediathumbnail_height: mediathumbnail_height,
                        movie_mediathumbnail_width: mediathumbnail_width,
                        movie_mediathumbnail_url: mediathumbnail_url,
                        movie_mediathumbnail_updatedAt: mediathumbnail_updatedAt,
                        'movie_mediathumbnail_x-tm-id': mediathumbnail_x_tm_id,
                        'movie_mediathumbnail_x-tm-type': mediathumbnail_x_tm_type,
                        movie_media_keywords: element['media:keywords'],
                        movie_meta_value_name: movie_meta_value_name,
                        movie_meta_value_value: movie_meta_value_value,
                        movie_meta_list_value: [],
                        movie_closedCaptions: element.closedCaptions,
                        movie_localClosedCaptions: element['tastemade:localClosedCaptions'].$t,
                        movie_localClosedCaptions_lang: element['tastemade:localClosedCaptions'].langCode,
                        movie_licenseStartDate: element.licenseStartDate,
                        movie_licenseEndDate: '',
                        movie_mediacontent_updatedAt: element['media:content'].updatedAt,
                        movie_mediacontent_duration: element['media:content'].duration,
                        movie_mediacontent_adBreakPoints: element['media:content'].adBreakPoints,
                        movie_mediacontent_fps: element['media:content'].fps,
                        movie_mediacontent_medium: element['media:content'].medium,
                        movie_mediacontent_url: element['media:content'].url,
                        movie_comPiece_updatedAt: '',
                        movie_comPiece_url: '',
                        'movie_prores_x-tm-id': element.prores['x-tm-id'],
                        movie_prores_updatedAt: element.prores.updatedAt,
                        movie_prores_url: element.prores.url
                    }
                );
            });
        }

        console.log('result', result);
    });
}
xmlToJson();

